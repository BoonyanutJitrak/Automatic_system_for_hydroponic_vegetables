from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import numpy as np
import cv2
import argparse
import random as rng

camera = PiCamera()
camera.resolution = (640, 480)
camera.framerate = 32
rawCapture = PiRGBArray(camera, size=(640, 480))
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    img = frame.array
    img = cv2.resize(img,(480,400))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    h,s,v = cv2.split(img)
    hsv_split = np.concatenate((h,s),axis=1)
    #cv2.imshow("Split HSV",hsv_split)
    Z = img.reshape((-1,3))
    # convert to np.float32
    Z = np.float32(Z)
    # define criteria, number of clusters(K) and apply kmeans()
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    K = 6
    ret,label,center=cv2.kmeans(Z,K,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)
    # Now convert back into uint8, and make original image
    center = np.uint8(center)
    print(center)   
    res = center[label.flatten()]
    res2 = res.reshape((img.shape))
    cv2.imshow('res2',res2)
    #cv2.imwrite("cluster.jpg",res2)
    lower_spot = np.array([16,57,215]) #17,0,0
    upper_spot = np.array([17,255,255])#255,255,255
    kernel = np.ones((3,3), np.uint8)
    mask = cv2.inRange(res2, lower_spot, upper_spot)
    result = cv2.bitwise_and(img, img, mask=mask)
    #cv2.imshow('mask',mask)
    #cv2.imshow('result',result)
    hist = cv2.equalizeHist(mask)
    cv2.imshow('mask',hist)
    gray_blur = cv2.GaussianBlur(hist, (5,5),0)
    #cv2.imshow('gray_blur',gray_blur)
    image_erode = cv2.erode(gray_blur, kernel)
    #img_dilation = cv2.dilate(hist, kernel, iterations=1)
    contours, hierarchy = cv2.findContours(image_erode,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) 
    img2 = img.copy()
    index = -1 #if negative all contours are drawn, index of contour to be drawn
    thickness = 2
    color = (20,0,255)
    cv2.drawContours(img2,contours,index,color,thickness)
    cv2.imshow('Contours',img2)
    #cv2.imshow('hsv',hsv)
     
    key = cv2.waitKey(1) & 0xFF
    rawCapture.truncate(0)
    if key == ord("q"):
        break

    
cv2.waitKey(0)
cv2.destroyAllWindows()

    
