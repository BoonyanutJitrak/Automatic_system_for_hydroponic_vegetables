from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import numpy as np
import cv2
import argparse
import random as rng
import matplotlib.pyplot as plt

def lineNotify(message):
    payload = {'message':message}
    return _lineNotify(payload)

def notifyFile(filename):
    file = {'imageFile':open(filename,'rb')}
    payload = {'message': 'test'}
    return _lineNotify(payload,file)

def _lineNotify(payload,file=None):
    import requests
    url = 'https://notify-api.line.me/api/notify'
    token = 'je49SkRGgS4lVHPS9S3VLdnYqrGsa2o0sOnWLjFb5Rs'   #EDIT
    headers = {'Authorization':'Bearer '+token}
    return requests.post(url, headers=headers , data = payload, files=file)

camera = PiCamera()
camera.resolution = (640, 480)
camera.framerate = 32
rawCapture = PiRGBArray(camera, size=(640, 480))
lineNotify('Start Working')


for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    img = frame.array
    img = cv2.resize(img,(480,400))
    img3 = img
    img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    #h = img[:,:,0]
    #s = img[:,:,1]
    #v = img[:,:,2]
    #h,s,v = cv2.split(img)
    #hsv_split = np.concatenate((h,s),axis=1)
    #final = cv2.bitwise_or(h, s)
    #cv2.imshow("Final", final)
    #print(final.dtype)

    Z = img.reshape((-1,3))
    Z = np.float32(Z)
    # define criteria, number of clusters(K) and apply kmeans()
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    K = 10
    ret,label,center=cv2.kmeans(Z,K,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)
    # Now convert back into uint8, and make original image
    center = np.uint8(center)
    print(center)   
    res = center[label.flatten()]
    res2 = res.reshape((img.shape))
    #print(res2.dtype)
    #print(final.shape)
    #cv2.imshow('res2',res2)
    lower_spot = np.array([33,0,0]) #17,0,0
    upper_spot = np.array([34,255,255])#255,255,255
    kernel = np.ones((3,3), np.uint8)
    mask = cv2.inRange(res2, lower_spot, upper_spot)
    result = cv2.bitwise_and(img3, img3, mask=mask)
    #cv2.imshow('result',result)
    hist = cv2.equalizeHist(mask)
    #cv2.imshow('mask',hist)
    gray_blur = cv2.GaussianBlur(hist, (5,5),0)
    image_erode = cv2.erode(gray_blur, kernel)
    contours, hierarchy = cv2.findContours(image_erode,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) 
    img2 = img3.copy()
    index = -1 #if negative all contours are drawn, index of contour to be drawn
    thickness = 2
    color = (20,0,255)
    cv2.drawContours(img2,contours,index,color,thickness)
    contours_poly = [None]*len(contours)
    boundRect = [None]*len(contours)
    centers = [None]*len(contours)
    radius = [None]*len(contours)
    blobs = []
    x = []
    y = []
    count = 0
    for i, c in enumerate(contours):
        contours_poly[i] = cv2.approxPolyDP(c, 3, True)
        boundRect[i] = cv2.boundingRect(contours_poly[i])
        centers[i],radius [i] = cv2.minEnclosingCircle(contours_poly[i])
        radius[i] = int(radius[i])
        print(radius)
        if(radius[i] > 1 and radius[i] < 6):
            blobs.append(centers[i])
            count += 1
        #print("count: ",count)
        #print("Warnning!!!")
    drawing = np.zeros((img2.shape[0], img2.shape[1], 3), dtype=np.uint8)
    
    for i in range(len(blobs)):
        color = (255,0,0)
        cv2.drawContours(drawing, contours_poly, i, color)
        cv2.circle(img2,(int(centers[i][0]), int(centers[i][1])),radius[i], color, 2)

    if count > 0 :
        lineNotify('warning')
        count = 0;
       
    cv2.imshow('img2',img2)
    key = cv2.waitKey(1) & 0xFF
    rawCapture.truncate(0)
    #lineNotify('Stop Working') 
    if key == ord("q"):
        lineNotify('Stop Working') 
        break

    
cv2.waitKey(0)
cv2.destroyAllWindows()
