from picamera import PiCamera
from time import sleep
camera = PiCamera()
import numpy as np
import cv2
import argparse
import random as rng

camera.resolution = (480, 400)
camera.capture('/home/pi/Desktop/project/image.jpg')
img = cv2.imread('image.jpg')
#img = cv2.imread('/home/pi/Desktop/project/pic/sin5.jpg')
#img = cv2.resize(img,(480,400))
cv2.imshow('oringin', img)
origin = img
#hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
lower_green = np.array([0,98,0])#20,178,69
upper_green = np.array([166,255,255])
kernel = np.ones((5,5), np.uint8)
mask = cv2.inRange(img, lower_green, upper_green)
hist = cv2.equalizeHist(mask)
cv2.imshow('mask',hist)
result = cv2.bitwise_and(origin, origin, mask=mask)
cv2.imshow('result', result)
lower_yello = np.array([0,121,139])#106,181,193,71,170,180
upper_yello = np.array([134,255,255])#182,230,255,134,255,255
kernel = np.ones((3,3), np.uint8)
mask = cv2.inRange(result, lower_yello, upper_yello)
resultspot = cv2.bitwise_and(origin, origin, mask=mask)
cv2.imshow('spot',resultspot)
hist = cv2.equalizeHist(mask)
gray_blur = cv2.GaussianBlur(hist, (5,5),0)
image_erode = cv2.erode(gray_blur, kernel)
#contour
contours, hierarchy = cv2.findContours(image_erode,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) 
img2 = img.copy()
index = -1 #if negative all contours are drawn, index of contour to be drawn
thickness = 2
color = (20,0,255)
cv2.drawContours(img2,contours,index,color,thickness)
        #cv2.imshow('Contours',img2)

contours_poly = [None]*len(contours)
boundRect = [None]*len(contours)
centers = [None]*len(contours)
radius = [None]*len(contours)
blobs = []
x = []
y = []
count = 0
for i, c in enumerate(contours):
    contours_poly[i] = cv2.approxPolyDP(c, 3, True)
    boundRect[i] = cv2.boundingRect(contours_poly[i])
    centers[i],radius [i] = cv2.minEnclosingCircle(contours_poly[i])
    radius[i] = int(radius[i])
    print(radius)
    if(radius[i] > -1 and radius[i] < 41):
        blobs.append(centers[i])
        count += 1
                #print("count: ",count)
                #print("Warnning!!!")
drawing = np.zeros((img2.shape[0], img2.shape[1], 3), dtype=np.uint8)
            
for i in range(len(blobs)):
    color = (255,0,0)
    cv2.drawContours(drawing, contours_poly, i, color)
    cv2.circle(img2,(int(centers[i][0]), int(centers[i][1])),radius[i], color, 2)
cv2.imshow('img2',img2)
print("stop")


cv2.waitKey(0)
cv2.destroyAllWindows()
